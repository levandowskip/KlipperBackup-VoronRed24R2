
#------------------------------------------------------------------
## conditional home
[gcode_macro _CG28]
description: Helper: Conditional homing
gcode:
  #NOZZLECLEAN
  {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% endif %}

#  G4 P200 ;Wait 200ms
#    SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.3
#    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.3
#    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.3
#    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.4
#deactivate_gcode:
#    {% set run_current = printer.configfile.config['tmc2209 stepper_z'].run_current | float %}
#    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={run_current}
#    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={run_current}
#    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={run_current}
#    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={run_current}
   
[gcode_arcs]
resolution = 0.1

[idle_timeout]
# only turn off motors and heaters if the printer is not paused
gcode:
    {% if not (printer.pause_resume.is_paused) %}
        RESPOND MSG="Idle timeout reached"
        TURN_OFF_HEATERS
        M84
        #halo_off
        #SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=hotend_fan TARGET=45
        #SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_heater TARGET=0

    {% endif %}
timeout: 7200

#---------------------------------------------------------------
##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

  
# M106 with lock and manual set feature
# M106 S128 M1 will update the fan in any case
#[gcode_macro M106]
#description: set fan with manual override and lock option
#rename_existing: M106.1
#gcode:
#  {% if printer['output_pin lock_M106'].value|int == 0 or params.M|default(0) == '1' %}
#    M106.1 {rawparams}
#  {% else %}
#    {action_respond_info("M106 update is locked")}
#  {% endif %}
  
#[gcode_macro M140]
#rename_existing: M140.1 
#gcode: 
#  {% if rawparams %} 
#    {% set sp_temp = rawparams.split('S', 1)[1] %} 
#    {% set new_temp = sp_temp|float + 10 %} 
#  {% endif %} 
#  M140.1 S{new_temp}

[gcode_macro M141]
description: Set temperature of chamber fan
gcode: SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={params.S|default(0)}

#---------------------------------------------------------------------------------------------
[gcode_macro _HOME_Z]
description = Helper: z homing
variable_calibrate_z_next = False
gcode:  
    {% set user = printer['gcode_macro _USER_VARIABLE'] %}
    {% set z_endstop = user.homing.z_endstop|default({'x':-10,'y':-10,'z':0, 'hop':0}) %}
    {% if user.hw.mag_probe.ena %}
    {% set probe = printer['gcode_macro _MAG_PROBE'].state|default('unknown')|lower %}
    {% set error = "run \"_MAG_PROBE ACTION=GET_STATUS\"" if probe == 'unknown'
  else "last dock or undock failed"           if probe == 'error'
  else "not valid"                            if probe is not in ['docked','attached']
	else "" %}
	{% if error|length > 0 %}
	{action_raise_error("Home&Probe: MagProbe state %s %s" % (error,probe|upper))}
	{% endif %}
	{% endif %}
	{% if user.hw.mag_probe.ena and probe == 'attached' %}
	{action_respond_info("Home&Probe: Probe docked, remove probe first")}
	DETACH_PROBE
  {% endif %}
    _SET_Z_CURRENT VAL=HOME
	G90
	G0 X{z_endstop.x} Y{z_endstop.y} F{user.speed.travel}
	G28 Z
	G0 Z{z_endstop.z} F{user.speed.z_hop/3}
	{% if calibrate_z_next %}
	SET_GCODE_VARIABLE MACRO=_HOME_Z VARIABLE=calibrate_z_next VALUE=False
  {% else %}
	_SET_Z_CURRENT
	G0 Z{user.z_hop} F{user.speed.z_hop}
  {% endif %}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}

[gcode_macro _SET_Z_CURRENT]
description = Helper: Set Z-drive motor current
variable_last_val = 'CONFIG'
gcode: 
	{% set val = params.VAL|default('CONFIG') %}
	{% set z_run = printer['gcode_macro _USER_VARIABLE'].homing.z_current       if val == 'HOME'
  else printer.configfile.settings['tmc2209 stepper_z'].run_current if 'tmc2209 stepper_z' in printer.configfile.settings
  else printer.configfile.settings['tmc5160 stepper_z'].run_current if 'tmc5160 stepper_z' in printer.configfile.settings %}
	{% if val != last_val %}
	SET_GCODE_VARIABLE MACRO=_SET_Z_CURRENT VARIABLE=last_val VALUE='"{val}"'
	{% if params.RESPOND|default(printer['gcode_macro _USER_VARIABLE'].respond.z_current)|int == 1 %}
	{action_respond_info("Home&Probe: RunCur %.2fA rms" % z_run|float)}
  {% endif %}
	SET_TMC_CURRENT STEPPER=stepper_z  CURRENT={z_run}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={z_run}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={z_run}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={z_run}
	M400
  {% endif %}


# ----------------------------------------------------------------------------------------
[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}
# ----------------------------------------------------------------------------------------

 ####### Power control ##################
[gcode_macro PowerON]
gcode:  SET_PIN PIN=Power_On VALUE=1

[gcode_macro PowerOFF]
gcode:  SET_PIN PIN=Power_On VALUE=0
#########################################
 
 #------------------------------------------------------------------------------
 [gcode_macro G34]
description: Reset bed mesh, offset and execute QGL
gcode:
  _PRINT_AR T="Home & QGL" SHOW_LCD=true
  BED_MESH_CLEAR
  SET_GCODE_OFFSET Z=0 MOVE=1
  {% if printer['gcode_macro PRINT_START'].var.redo_qgl|lower == 'true' %}
    NOZZLECLEAN
    _PRINT_AR T="QGL forced by PRINT_START"
    QUAD_GANTRY_LEVEL PARK=false HOME=false
  {% elif printer.quad_gantry_level.applied|lower == 'false' %}
    NOZZLECLEAN
    _PRINT_AR T="QGL not executed yet"
    QUAD_GANTRY_LEVEL PARK=false HOME=false
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1

#----------------------------------------------------------------------------------------------
[gcode_macro LOAD_FILAMENT]
variable_load_distance:  80
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(100) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

  #--------------------------------------------------------------------------------------------------
[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  80
variable_purge_distance:  10
gcode:
    {% set speed = params.SPEED|default(100) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

  #------------------------------------------------------------------------------------------------
[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c $0"
timeout: 90.0
verbose: True

#[gcode_macro PROBE_CALIBRATE]
#gcode:

############# Klipper backup GITHUB ############

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True
#    CARTOGRAPHER_CALIBRATE